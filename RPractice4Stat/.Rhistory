model.0 = lm(data=data.0, y~x)
model.1 = lm(data=data.1, y~x)
RSS = deviance(model)
RSS.0 = deviance(model.0)
RSS.1 = deviance(model.1)
F_val = ((RSS - RSS.0 - RSS.1)/2)/((RSS.0 + RSS.1)/(nrow(data)-2*2))
print(RSS)
print(RSS.0)
print(RSS.1)
print(F_val)
data$color = c("red", "blue")[data$dummy+1]
fig = plot_ly(data=data, x=~x, y=~y, type = 'scatter', mode='markers',
name="Orginal", marker=list(color = ~color))
if (F_val>10) {
print(predict(model.0, data.0))
fig = fig%>%
add_trace(x=~x, y=predict(model.0, data), mode="lines", name="Regression fit")
}
fig
}
Choy(set_1)
Choy(set_2)
Choy = function(data){
model = lm(data=data, y~x)
data.0 = data[data$dummy==0,]
data.1 = data[data$dummy==1,]
model.0 = lm(data=data.0, y~x)
model.1 = lm(data=data.1, y~x)
RSS = deviance(model)
RSS.0 = deviance(model.0)
RSS.1 = deviance(model.1)
F_val = ((RSS - RSS.0 - RSS.1)/2)/((RSS.0 + RSS.1)/(nrow(data)-2*2))
print(RSS)
print(RSS.0)
print(RSS.1)
print(F_val)
data$color = c("red", "blue")[data$dummy+1]
fig = plot_ly(data=data, x=~x, y=~y, type = 'scatter',
name="Orginal", marker=list(color = ~color))
if (F_val>10) {
print(predict(model.0, data.0))
fig = fig%>%
add_trace(x=~x, y=predict(model.0, data), mode="lines", name="Regression fit")
}
fig
}
Choy(set_1)
Choy(set_2)
Choy = function(data){
model = lm(data=data, y~x)
data.0 = data[data$dummy==0,]
data.1 = data[data$dummy==1,]
model.0 = lm(data=data.0, y~x)
model.1 = lm(data=data.1, y~x)
RSS = deviance(model)
RSS.0 = deviance(model.0)
RSS.1 = deviance(model.1)
F_val = ((RSS - RSS.0 - RSS.1)/2)/((RSS.0 + RSS.1)/(nrow(data)-2*2))
print(RSS)
print(RSS.0)
print(RSS.1)
print(F_val)
data$color = c("red", "blue")[data$dummy+1]
fig = plot_ly(data=data,  type = 'scatter')%>%
add_trace(x=~x, y=~y, mode='markers', name="Orginal", marker=list(color = ~color))
if (F_val>10) {
print(predict(model.0, data.0))
fig = fig%>%
add_trace(x=~x, y=predict(model.0, data), mode="lines", name="Regression fit")
}
fig
}
Choy(set_1)
Choy(set_2)
Choy = function(data){
model = lm(data=data, y~x)
data.0 = data[data$dummy==0,]
data.1 = data[data$dummy==1,]
model.0 = lm(data=data.0, y~x)
model.1 = lm(data=data.1, y~x)
RSS = deviance(model)
RSS.0 = deviance(model.0)
RSS.1 = deviance(model.1)
F_val = ((RSS - RSS.0 - RSS.1)/2)/((RSS.0 + RSS.1)/(nrow(data)-2*2))
print(RSS)
print(RSS.0)
print(RSS.1)
print(F_val)
data$color = c("red", "blue")[data$dummy+1]
fig = plot_ly(data=data,  type = 'scatter', mode='markers')%>%
add_trace(x=~x, y=~y, mode='markers', name="Orginal", marker=list(color = ~color))
if (F_val>10) {
print(predict(model.0, data.0))
fig = fig%>%
add_trace(x=~x, y=predict(model.0, data), mode="lines", name="Regression fit")
}
fig
}
Choy(set_1)
Choy(set_2)
Choy = function(data){
model = lm(data=data, y~x)
data.0 = data[data$dummy==0,]
data.1 = data[data$dummy==1,]
model.0 = lm(data=data.0, y~x)
model.1 = lm(data=data.1, y~x)
RSS = deviance(model)
RSS.0 = deviance(model.0)
RSS.1 = deviance(model.1)
F_val = ((RSS - RSS.0 - RSS.1)/2)/((RSS.0 + RSS.1)/(nrow(data)-2*2))
print(RSS)
print(RSS.0)
print(RSS.1)
print(F_val)
data$color = c("red", "blue")[data$dummy+1]
fig = plot_ly(data=data,  type = 'scatter', mode='markers')%>%
add_trace(x=~x, y=~y, mode='markers', name="Orginal", marker=list(color = ~color))
if (F_val>10) {
fig = fig%>%
add_trace(x=~x, y=predict(model.0, data), mode="lines", name="Regression fit", color="black")
add_trace(x=~x, y=predict(model.1, data), mode="lines", name="Regression fit")
}
fig
}
Choy(set_1)
Choy(set_2)
Choy = function(data){
model = lm(data=data, y~x)
data.0 = data[data$dummy==0,]
data.1 = data[data$dummy==1,]
model.0 = lm(data=data.0, y~x)
model.1 = lm(data=data.1, y~x)
RSS = deviance(model)
RSS.0 = deviance(model.0)
RSS.1 = deviance(model.1)
F_val = ((RSS - RSS.0 - RSS.1)/2)/((RSS.0 + RSS.1)/(nrow(data)-2*2))
print(RSS)
print(RSS.0)
print(RSS.1)
print(F_val)
data$color = c("red", "blue")[data$dummy+1]
fig = plot_ly(data=data,  type = 'scatter', mode='markers')%>%
add_trace(x=~x, y=~y, mode='markers', name="Orginal", marker=list(color = ~color))
if (F_val>10) {
fig = fig%>%
add_trace(x=~x, y=predict(model.0, data), mode="lines", name="Regression fit", color="black")%>%
add_trace(x=~x, y=predict(model.1, data), mode="lines", name="Regression fit")
}
fig
}
Choy(set_1)
Choy(set_2)
Choy = function(data){
model = lm(data=data, y~x)
data.0 = data[data$dummy==0,]
data.1 = data[data$dummy==1,]
model.0 = lm(data=data.0, y~x)
model.1 = lm(data=data.1, y~x)
RSS = deviance(model)
RSS.0 = deviance(model.0)
RSS.1 = deviance(model.1)
F_val = ((RSS - RSS.0 - RSS.1)/2)/((RSS.0 + RSS.1)/(nrow(data)-2*2))
print(RSS)
print(RSS.0)
print(RSS.1)
print(F_val)
data$color = c("red", "blue")[data$dummy+1]
fig = plot_ly(data=data,  type = 'scatter', mode='markers')%>%
add_trace(x=~x, y=~y, mode='markers', name="Orginal", marker=list(color = ~color))
if (F_val>10) {
fig = fig%>%
add_trace(x=~x, y=predict(model.0, data), mode="lines", name="Regression fit")%>%
add_trace(x=~x, y=predict(model.1, data), mode="lines", name="Regression fit")
}
fig
}
Choy(set_1)
Choy(set_2)
Choy = function(data){
model = lm(data=data, y~x)
data.0 = data[data$dummy==0,]
data.1 = data[data$dummy==1,]
model.0 = lm(data=data.0, y~x)
model.1 = lm(data=data.1, y~x)
RSS = deviance(model)
RSS.0 = deviance(model.0)
RSS.1 = deviance(model.1)
F_val = ((RSS - RSS.0 - RSS.1)/2)/((RSS.0 + RSS.1)/(nrow(data)-2*2))
print(RSS)
print(RSS.0)
print(RSS.1)
print(F_val)
data$color = c("red", "blue")[data$dummy+1]
fig = plot_ly(data=data,  type = 'scatter', mode='markers')%>%
add_trace(x=~x, y=~y, mode='markers', name="Orginal", marker=list(color = ~color))
if (F_val>10) {
fig = fig%>%
add_trace(x=~x, y=predict(model.0, data), mode="lines", name="red regression")%>%
add_trace(x=~x, y=predict(model.1, data), mode="lines", name="blue regression")
} else{
fig = fig%>%
add_trace(x=~x, y=predict(model, data), mode="lines", name="Regression fit")
}
fig
}
Choy(set_1)
Choy(set_2)
Choy = function(data){
model = lm(data=data, y~x)
data.0 = data[data$dummy==0,]
data.1 = data[data$dummy==1,]
model.0 = lm(data=data.0, y~x)
model.1 = lm(data=data.1, y~x)
RSS = deviance(model)
RSS.0 = deviance(model.0)
RSS.1 = deviance(model.1)
F_val = ((RSS - RSS.0 - RSS.1)/2)/((RSS.0 + RSS.1)/(nrow(data)-2*2))
print(RSS)
print(RSS.0)
print(RSS.1)
print(F_val)
data$color = c("red", "blue")[data$dummy+1]
fig = plot_ly(data=data,  type = 'scatter', mode='markers')%>%
add_trace(x=~x, y=~y, mode='markers', name="Orginal", marker=list(color = ~color))
if (F_val>10) {
fig = fig%>%
add_trace(x=~x, y=predict(model.0, data), mode="lines", name="red regression")%>%
add_trace(x=~x, y=predict(model.1, data), mode="lines", name="blue regression")
} else{
fig = fig%>%
add_trace(x=~x, y=predict(model, data), mode="lines", name="Regression fit")%>%
add_trace(x=~x, y=predict(lm(data=data, y~dummy*x+(1-dummy)*x), data), mode="lines", name="Regression fit")
}
fig
}
Choy(set_1)
Choy(set_2)
Choy = function(data){
model = lm(data=data, y~x)
data.0 = data[data$dummy==0,]
data.1 = data[data$dummy==1,]
model.0 = lm(data=data.0, y~x)
model.1 = lm(data=data.1, y~x)
RSS = deviance(model)
RSS.0 = deviance(model.0)
RSS.1 = deviance(model.1)
F_val = ((RSS - RSS.0 - RSS.1)/2)/((RSS.0 + RSS.1)/(nrow(data)-2*2))
print(RSS)
print(RSS.0)
print(RSS.1)
print(F_val)
data$color = c("red", "blue")[data$dummy+1]
fig = plot_ly(data=data,  type = 'scatter', mode='markers')%>%
add_trace(x=~x, y=~y, mode='markers', name="Orginal", marker=list(color = ~color))
if (F_val>10) {
fig = fig%>%
add_trace(x=~x, y=predict(model.0, data), mode="lines", name="red regression")%>%
add_trace(x=~x, y=predict(model.1, data), mode="lines", name="blue regression")%>%
add_trace(x=~x, y=predict(lm(data=data, y~dummy*x+(1-dummy)*x), data), mode="lines", name="Regression fit")
} else{
fig = fig%>%
add_trace(x=~x, y=predict(model, data), mode="lines", name="Regression fit")%>%
add_trace(x=~x, y=predict(lm(data=data, y~dummy*x+(1-dummy)*x), data), mode="lines", name="Regression fit")
}
fig
}
Choy(set_1)
Choy(set_2)
Choy = function(data, with_lines=F){
model = lm(data=data, y~x)
data.0 = data[data$dummy==0,]
data.1 = data[data$dummy==1,]
model.0 = lm(data=data.0, y~x)
model.1 = lm(data=data.1, y~x)
RSS = deviance(model)
RSS.0 = deviance(model.0)
RSS.1 = deviance(model.1)
F_val = ((RSS - RSS.0 - RSS.1)/2)/((RSS.0 + RSS.1)/(nrow(data)-2*2))
print(RSS)
print(RSS.0)
print(RSS.1)
print(F_val)
data$color = c("red", "blue")[data$dummy+1]
fig = plot_ly(data=data,  type = 'scatter', mode='markers')%>%
add_trace(x=~x, y=~y, mode='markers', name="Orginal", marker=list(color = ~color))
if (F_val>10) {
fig = fig%>%
add_trace(x=~x, y=predict(model.0, data), mode="lines", name="red regression")%>%
add_trace(x=~x, y=predict(model.1, data), mode="lines", name="blue regression")
} else{
fig = fig%>%
add_trace(x=~x, y=predict(model, data), mode="lines", name="Regression fit")
}
if (with_lines) fig = fig%>%add_trace(x=~x, y=predict(lm(data=data, y~dummy*x+(1-dummy)*x), data), mode="lines", name="Regression fit")
fig
}
Choy(set_1)
Choy(set_2)
Choy = function(data, with_lines=T){
model = lm(data=data, y~x)
data.0 = data[data$dummy==0,]
data.1 = data[data$dummy==1,]
model.0 = lm(data=data.0, y~x)
model.1 = lm(data=data.1, y~x)
RSS = deviance(model)
RSS.0 = deviance(model.0)
RSS.1 = deviance(model.1)
F_val = ((RSS - RSS.0 - RSS.1)/2)/((RSS.0 + RSS.1)/(nrow(data)-2*2))
print(RSS)
print(RSS.0)
print(RSS.1)
print(F_val)
data$color = c("red", "blue")[data$dummy+1]
fig = plot_ly(data=data,  type = 'scatter', mode='markers')%>%
add_trace(x=~x, y=~y, mode='markers', name="Orginal", marker=list(color = ~color))
if (F_val>10) {
fig = fig%>%
add_trace(x=~x, y=predict(model.0, data), mode="lines", name="red regression")%>%
add_trace(x=~x, y=predict(model.1, data), mode="lines", name="blue regression")
} else{
fig = fig%>%
add_trace(x=~x, y=predict(model, data), mode="lines", name="Regression fit")
}
if (with_lines) fig = fig%>%add_trace(x=~x, y=predict(lm(data=data, y~dummy*x+(1-dummy)*x), data), mode="markers", name="Regression fit", marker=list(color="black"))
fig
}
Choy(set_1)
Choy(set_2)
model = lm(data=data_3, V2~V1)
summary(model)
ost = resid(model)
model = lm(data=data_3, V2~V1)
summary(model)
fig = plot_ly(data=data_3, x=~V1, y=~V2, type = 'scatter', mode='markers', name="Orginal")%>%
add_trace(x=~V1, y=predict(model, data_3), mode="lines", name="Regression fit")
fig
ost = resid(model)
ost.ranked = rank(ost)
x = data_3$V1
x.ranked = rank(x)
max(x.ranked)
max(ost.ranked)
p = 1 - 6*sum((x.ranked - ost.ranked)^2)/(n*(n^2-1))
p = 1 - 6*sum((x.ranked - ost.ranked)**2)/(n*(n**2-1))
p = x.ranked-ost.ranked
p = (x.ranked-ost.ranked)^2
p = sum((x.ranked-ost.ranked)^2)
p = 6*sum((x.ranked-ost.ranked)^2)
p = 6*sum((x.ranked-ost.ranked)^2) / (n*(n^2-1))
n=nrow(data_3)
p = 6*sum((x.ranked-ost.ranked)^2) / (n*(n^2-1))
p = 1-6*sum((x.ranked-ost.ranked)^2) / (n*(n^2-1))
statis = p*(n-1)**0.5
p = 1-6*sum((x.ranked-ost.ranked)^2) / (n*(n^2-1))
statis = p*(n-1)**0.5
p = 1-6*sum((x.ranked-ost.ranked)**2) / (n**3-n)
ost.s = sort(ost)
ost.s = sort(ost)
p = 1-6*sum((x-ost.s)**2) / (n**3-n)
statis = p*(n-1)**0.5
size(x)
length(x)
length(unique(x))
length(unique(ost.rank))
length(unique(ost.ranked))
p = 1-6*sum((x.ranked-ost.ranked)**2) / (n**3-n)
statis = p*(n-2)**0.5/(1-p**2)**0.5
model = lm(data=data_3, V2~V1)
summary(model)
fig = plot_ly(data=data_3, x=~V1, y=~V2, type = 'scatter', mode='markers', name="Orginal")%>%
add_trace(x=~V1, y=predict(model, data_3), mode="lines", name="Regression fit")
fig
ost = resid(model)
ost.ranked = rank(ost)
x = data_3$V1
x.ranked = rank(x)
n=nrow(data_3)
p = 1-6*sum((x.ranked-ost.ranked)**2) / (n**3-n)
statis = p*(n-2)**0.5/(1-p**2)**0.5
data = data_3%>% arrange(desc(x))
View(data)
View(data_3)
data.first = data[1:m,]
m=3/8*n
m=round(3/8*n)
data.first = data[1:m,]
data.end = data[n-m:m,]
m=round(3/8*n)
data.first = data[1:m,]
data.end = data[n-m:n,]
m=round(3/8*n)
data.first = data[1:m,]
data.end = data[(n-m):n,]
data.first = data[1:m,]
data.end = data[(n-m)+1:n,]
data.first = data[1:m,]
data.end = data[((n-m)+1):n,]
View(data_1)
model.end = lm(data=data.end, V2~V1)
data.first = data[1:m,]
data.end = data[((n-m)+1):n,]
model.first = lm(data=data.first, V2~V1)
model.end = lm(data=data.end, V2~V1)
RSS.first = deviance(model.first)
RSS.end = deviance(model.end)
Ttest = RSS.end/RSS.first
Ttest
fig = plot_ly(x=~x, y=~ost, type = 'scatter', mode='markers')
fig
fig = plot_ly(x=~data_3$V2, y=~ost, type = 'scatter', mode='markers')
fig
fig = plot_ly(x=~data_3$V2, y=~ost**2, type = 'scatter', mode='markers')
fig
fig = plot_ly(x=~data_3$V1, y=~ost**2, type = 'scatter', mode='markers')
fig
ost = resid(model)**2
data_1 = read.csv('data/1.txt',
header = F)
x = data_3$V1
x.ranked = rank(x)
n=nrow(data_3)
p = 1-6*sum((x.ranked-ost.ranked)**2) / (n**3-n)
statis = p*(n-2)**0.5/(1-p**2)**0.5
model = lm(data=data_3, V2~V1)
summary(model)
fig = plot_ly(data=data_3, x=~V1, y=~V2, type = 'scatter', mode='markers', name="Orginal")%>%
add_trace(x=~V1, y=predict(model, data_3), mode="lines", name="Regression fit")
fig
ost = resid(model)**2
ost.ranked = rank(ost)
x = data_3$V1
x.ranked = rank(x)
n=nrow(data_3)
p = 1-6*sum((x.ranked-ost.ranked)**2) / (n**3-n)
statis = p*(n-2)**0.5/(1-p**2)**0.5
data = data_3%>% arrange(desc(x))
m=round(3/8*n)
data.first = data[1:m,]
data.end = data[((n-m)+1):n,]
model.first = lm(data=data.first, V2~V1)
model.end = lm(data=data.end, V2~V1)
model = lm(data=data_3, V2~V1)
summary(model)
fig = plot_ly(data=data_3, x=~V1, y=~V2, type = 'scatter', mode='markers', name="Orginal")%>%
add_trace(x=~V1, y=predict(model, data_3), mode="lines", name="Regression fit")
fig
ost = resid(model)
ost.ranked = rank(ost)
x = data_3$V1
x.ranked = rank(x)
n=nrow(data_3)
p = 1-6*sum((x.ranked-ost.ranked)**2) / (n**3-n)
statis = p*(n-2)**0.5/(1-p**2)**0.5
data = data_3%>% arrange(desc(x))
m=round(3/8*n)
model = lm(data=data_3, V2~V1)
summary(model)
fig = plot_ly(data=data_3, x=~V1, y=~V2, type = 'scatter', mode='markers', name="Orginal")%>%
add_trace(x=~V1, y=predict(model, data_3), mode="lines", name="Regression fit")
fig
ost = resid(model)**2
ost.ranked = rank(ost)
x = data_3$V1
x.ranked = rank(x)
n=nrow(data_3)
p = 1-6*sum((x.ranked-ost.ranked)**2) / (n**3-n)
statis = p*(n-2)**0.5/(1-p**2)**0.5
data = data_3%>% arrange(desc(x))
m=round(3/8*n)
data.first = data[1:m,]
data.end = data[((n-m)+1):n,]
model.first = lm(data=data.first, V2~V1)
model.end = lm(data=data.end, V2~V1)
RSS.first = deviance(model.first)
RSS.end = deviance(model.end)
Ttest = RSS.end/RSS.first
model = lm(data=data_3, V2~V1)
summary(model)
fig = plot_ly(data=data_3, x=~V1, y=~V2, type = 'scatter', mode='markers', name="Orginal")%>%
add_trace(x=~V1, y=predict(model, data_3), mode="lines", name="Regression fit")
fig
ost = resid(model)
ost.ranked = rank(ost)
x = data_3$V1
x.ranked = rank(x)
n=nrow(data_3)
p = 1-6*sum((x.ranked-ost.ranked)**2) / (n**3-n)
statis = p*(n-2)**0.5/(1-p**2)**0.5
data = data_3%>% arrange(desc(x))
m=round(3/8*n)
data.first = data[1:m,]
data.end = data[((n-m)+1):n,]
model.first = lm(data=data.first, V2~V1)
model.end = lm(data=data.end, V2~V1)
RSS.first = deviance(model.first)
RSS.end = deviance(model.end)
Ttest = RSS.end/RSS.first
rstandard(model)
gq(model, fraction=0.2)
gqtest(model, fraction=0.2)
Ttest = RSS.first/RSS.end
gqtest(model, fraction=2/8)
gqtest(model, fraction=3/8)
gqtest(model, fraction=1/8)
gqtest(model, fraction=2/8)
ost = abs(resid(model))
ost.ranked = rank(ost)
x = data_3$V1
x.ranked = rank(x)
n=nrow(data_3)
p = 1-6*sum((x.ranked-ost.ranked)**2) / (n**3-n)
statis = p*(n-2)**0.5/(1-p**2)**0.5
